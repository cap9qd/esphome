esphome:
  name: rfbridge
  friendly_name: rfbridge
  name_add_mac_suffix: true
  
esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "EnAgvhSjngpFSXcnMkf/yNhjlwRuM2u4tshX7mGjug4="

ota:
  password: "3fa5a77f0adcd0049438816d4992fc49"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rfbridge Fallback Hotspot"
    password: "N1I0CwYCmJtu"

captive_portal:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: "RF Bridge Status"

# use esphome log viewer to get binary transmission for sensor state.  Below are examples when using either single state or dual state sensors.

# use this for single state sensors (single trigger)
  - platform: remote_receiver
    name: "Sensor1"
    rc_switch_raw:
      code: '100110011100011010101001'
      protocol: 1



# use this for dual state sensors (open/closed trigger)
  - platform: remote_receiver
    name: "Sensor 2 Open"
    internal: yes
    rc_switch_raw:
      code: '001111111110111100101110'
      protocol: 1
    on_press:
      - binary_sensor.template.publish:
          id: Sensor2
          state: ON
  - platform: remote_receiver
    name: "Sensor 2 Closed"
    internal: yes
    rc_switch_raw:
      code: '001111111110111100100111'
      protocol: 1
    on_press:
      - binary_sensor.template.publish:
          id: Sensor2
          state: OFF
  - platform: template
    name: "Sensor2 State"
    device_class: window
    id: Sensor2


remote_receiver:
  pin: 4
#  dump: all
  dump: rc_switch
  filter: 100us
  tolerance: 50%
  idle: 2ms

remote_transmitter:
  pin: 5
  carrier_duty_percent: 100%

status_led:
  pin:
    number: GPIO13
    inverted: yes